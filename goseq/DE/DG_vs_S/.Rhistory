source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
shiny::runApp('Desktop/drive-download-20190902T165807Z-001/Genes to do/app')
runApp('Desktop/drive-download-20190902T165807Z-001/Genes to do/app')
a <- "hi.csv"
gsub(".csv", "", a)
runApp('Desktop/drive-download-20190902T165807Z-001/Genes to do/app')
runApp('Desktop/drive-download-20190902T165807Z-001/Genes to do/app')
runApp('Desktop/drive-download-20190902T165807Z-001/Genes to do/app')
?if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("DESeq2")
braker <- matrix(c(90.4,97.3,74.9,98,79.6,85.4), ncol=2, byrow = TRUE)
colnames(braker) <- c(MAKER, BRAKER)
rownames(braker) <- c(Arabidopsis thaliana, Populus trichocarpa, Funaria hygrometrica)
colnames(braker) <- c("MAKER", "BRAKER")
rownames(braker) <- c("Arabidopsis thaliana", "Populus trichocarpa", "Funaria hygrometrica")
tab <- as.table(tab)
tab <- as.table(braker)
tab
braker_sense <- matrix(c(42.2,51.1,41.7,39,43.6,34.4), ncol=2, byrow = TRUE)
colnames(braker) <- c("Sensitivity", "Specificity")
rownames(braker) <- c("Arabidopsis thaliana", "Populus trichocarpa", "Funaria hygrometrica")
tab <- as.table(braker_sense)
p3 <- ggplot() +
geom_bar(data=my_dat, aes(y=my_mean,x=cyl,ymin=my_mean-my_se,ymax=my_mean+my_se), stat="identity", width = 0.75) +
geom_errorbar(data=my_dat, aes(y=my_mean,x=cyl,ymin=my_mean-my_se,ymax=my_mean+my_se), width = 0.75) +
geom_point(data=mtcars, aes(y=disp, x=cyl, fill=cyl)) +
ylim(c(0,500)) +
theme_classic()
ibrary(ggplot2)
library(ggpubr)
theme_set(theme_pubr())
library(ggplot2)
library(ggpubr)
theme_set(theme_pubr())
p3 <- ggplot() +
geom_bar(data=my_dat, aes(y=my_mean,x=cyl,ymin=my_mean-my_se,ymax=my_mean+my_se), stat="identity", width = 0.75) +
geom_errorbar(data=my_dat, aes(y=my_mean,x=cyl,ymin=my_mean-my_se,ymax=my_mean+my_se), width = 0.75) +
geom_point(data=mtcars, aes(y=disp, x=cyl, fill=cyl)) +
ylim(c(0,500)) +
theme_classic()
p3 <- ggplot() +
geom_bar(data=braker) +
geom_point(data=braker_sense) +
theme_classic()
tab1 <- as.table(braker_sense)
tab <- as.table(braker)
p3 <- ggplot() +
geom_bar(data=tab) +
geom_point(data=tab1) +
theme_classic()
tab <- as.data.frame(tab)
tab1<- as.data.frame(tab1)
p3 <- ggplot() +
geom_bar(data=tab) +
geom_point(data=tab1) +
theme_classic()
p3
View(tab)
View(tab1)
View(tab)
View(braker)
tab <- as.data.frame(braker)
View(tab)
tab1<- as.data.frame(braker_sense)
p3 <- ggplot() +
geom_bar(data=tab, aes(x=braker, y=braker)) +
geom_point(data=tab1) +
theme_classic()
p3
row.names(braker)
p3 <- ggplot() +
geom_bar(data=tab, aes(x=row.names(braker), y=col.names(braker), stat="identity") +
theme_classic()
p3 <- ggplot() +
geom_bar(data=tab, aes(x=row.names(braker), y=col.names(braker), stat="identity")) +
theme_classic()
p3 <- ggplot() +
geom_bar(data=tab, aes(x=row.names(braker), y=col.names(braker)) +
theme_classic()
p3 <- ggplot() +
geom_bar(data=tab, aes(x=row.names(braker), y=col.names(braker))) +
theme_classic()
p3 <- ggplot() +
geom_bar(data=tab, aes(x=row.names(braker), y=col.names(braker))) +
theme_classic()
p3
col.names(braker)
colnames(braker)
p3 <- ggplot() +
geom_bar(data=tab, aes(x=row.names(braker), y=colnames(braker))) +
theme_classic()
p3
p3 <- ggplot() +
geom_bar(data=tab, aes(x=row.names(braker)) +
theme_classic()
p3
p3 <- ggplot() +
geom_bar(data=tab, aes(x=row.names(braker))) +
theme_classic()
p3
View(braker)
View(braker_sense)
View(braker)
braker <- matrix(c(90.4,97.3,74.9,98,79.6,85.4), ncol=2, byrow = TRUE)
colnames(braker) <- c("MAKER", "BRAKER")
rownames(braker) <- c("Arabidopsis thaliana", "Populus trichocarpa", "Funaria hygrometrica")
tab <- as.table(braker)
tab <- as.data.frame(braker)
braker
data <- data.frame(
name=c("Arabidopsis thaliana- MAKER","Arabidopsis thaliana- BRAKER","Funaria hygrometrica-MAKER","Funaria hygrometrica-BRAKER","Populus trichocarpa-MAKER","Populus trichocarpa-BRAKER") ,
value=c(90.4,97.3,74.9,98,79.6,85.4)
)
p3 <- ggplot() +
geom_bar(data=data, aes(x=name,y=value)) +
theme_classic()
p3
data <- data.frame(
name=c("Arabidopsis thaliana- MAKER","Arabidopsis thaliana- BRAKER","Funaria hygrometrica-MAKER","Funaria hygrometrica-BRAKER","Populus trichocarpa-MAKER","Populus trichocarpa-BRAKER") ,
value=c(90.4,97.3,74.9,98,79.6,85.4)
)
p3 <- ggplot() +
geom_bar(data=data, aes(x=name,y=value)) +
theme_classic()
p3
p3 <- ggplot(data=data, aes(x=name,y=value)) +
geom_bar(stat = "identity")
p3
p3 <- ggplot(data=data, aes(x=name,y=value)) +
geom_bar(stat = "identity", width=0.2)
p3 <- ggplot(data=data, aes(x=name,y=value)) +
geom_bar(stat = "identity", width=0.2)
p3
run_simulation(0.6, 100,100)
library(tidyverse)
library(ggplot2)
rm(list = ls())
simulate <- function(n_f, n_m, p_0, n_samp, n_pop) {
## genotype frequenies in Hardy-Weinberg
##
x <- c(p_0^2, 2*p_0*(1-p_0), (1-p_0)^2)
p <- numeric(n_samp)
for (i in 1:n_samp) {
## construct female genotypes at random given H-W
##
f <- numeric(n_f)
for (j in 1:n_f) {
tmp <- rmultinom(1, 1, x)
f[j] <- which(tmp[, 1] == 1)
}
## construct male genotypes at random given H-W
##
m <- numeric(n_m)
for (j in 1:n_m) {
tmp <- rmultinom(1, 1, x)
m[j] <- which(tmp[, 1] == 1)
}
## construct offspring as average of mom and dad
##
p[i] <- 0
for (j in 1:n_pop) {
p_f <- (sample(f, 1) - 1)/2
p_m <- (sample(m, 1) - 1)/2
p[i] <- p[i] + (p_f + p_m)/2
}
p[i] <- p[i]/n_pop
}
return(p)
}
result <- simulate(n_f = 10, n_m = 20, p_0 = 0.5, n_samp = 100,
n_pop = 100)
p <- ggplot(tibble(p = result), aes(x = p)) +
geom_histogram(binwidth = 0.01) +
theme_bw() +
ggtitle("One replication of sampling")
p
p_0 <- 0.5
n_e <- 4*10*20/(10 + 20)
dat <- tibble(Category = c("Expected", "Observed"),
Mean = c(p_0, round(mean(result), 3)),
Variance = c(round(p_0*(1-p_0)/(2*n_e), 6),
round(var(result), 6)))
dat
p_mean <- numeric(1000)
p_var <- numeric(1000)
p_0 = 0.5
for (i in 1:1000) {
p <- simulate(n_f = 10, n_m = 20, p_0 = 0.5, n_samp = 100,
n_pop = 100)
p_mean[i] <- mean(p)
p_var[i] <- var(p)
}
p_dat <- tibble(p_mean = p_mean, p_var = p_var)
p <- ggplot(p_dat, aes(x = p_mean)) +
geom_histogram(bins = 25) +
geom_vline(xintercept = 0.5, linetype = "dashed",
color = "salmon") +
ggtitle("Distribution of mean allele frequencies") +
theme_bw()
p
p <- ggplot(p_dat, aes(x = p_var)) +
geom_histogram(bins = 25) +
geom_vline(xintercept = p_0*(1-p_0)/(2*n_e), linetype = "dashed",
color = "salmon") +
ggtitle("Distribution of variance in allele frequencies") +
theme_bw()
p
run_simulation <- function(p_0, n_samp, n_pop) {
dat <- data.frame(n_f = NA, n_m = NA, n_e = NA, n_e_obs = NA,
var_p = NA, var_p_obs = NA)
for (n_f in c(5, 10, 25, 50, 100)) {
for (n_m in c(5, 10, 25, 50, 100)) {
p <- simulate(n_f = n_f, n_m = n_m, p_0 = 0.5, n_samp = n_samp,
n_pop = n_pop)
## calculate Ne and Var(p) from formulas
##
n_e <- 4.0*n_f*n_m/(n_f + n_m)
var_p <- p_0*(1 - p_0)/(2*n_e)
## calculate observed Ne from observed variance
##
n_e_obs <- 0.5*0.5/(2*var(p))
dat <- add_row(dat, n_f = n_f, n_m = n_m, n_e = n_e,
n_e_obs = n_e_obs, var_p = var_p,
var_p_obs = var(p))
}
}
dat <- subset(dat, !is.na(n_f))
p <- ggplot(dat, aes(x = n_e, y = n_e_obs)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed",
color = "salmon") +
theme_bw()
print(p)
p <- ggplot(dat, aes(x = var_p, y = var_p_obs)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed",
color = "salmon") +
theme_bw()
print(p)
}
run_simulation(0.5, 100,100)
run_simulation(0.5, 1000,1000)
run_simulation(0.2, 1,10)
run_simulation(0.3, 6,12)
run_simulation(0.5, 100,50)
run_simulation(0.5, 100,10)
run_simulation(0.5, 10,100)
run_simulation(0.6, 100,100)
run_simulation(50, 1,100)
run_simulation(50, 100,1)
run_simulation(1,2,3)
run_simulation(0.5, 10, 100)
run_simulation(0.5, 100, 50)
run_simulation(0.5, 10,50)
run_simulation(0.2, 100,100)
run_simulation(0.2, 10,100)
run_simulation(0.2, 100,10)
run_simulation(0.5, 1,100)
run_simulation(0.5, 100,1)
run_simulation(0.2,1,100)
run_simulation(0.2,2,100)
rownames=c("Mean", "low", "high", "sigma", "sigma_mom")
colnames=c("lwr_v","fwc_v","lwr_p","fwc_p","lma_p","lma_v")
tab <- matrix(c(0.4818201,0.03361962,0.8187829,0.314943440,0.009938011,
0.2012552,0.001532554,0.6035302,0.673482715,0.011828855,
0.4444776,0.03266151, 0.7827736, 0.315321578,0.009786421,
0.1768857,0.001204724,0.5512517,0.671961089,0.011318228,
0.1771277,0.001519286,0.55411,0.672910504,0.011463162,
0.1757374,0.001000097,0.5596201,0.003554301,0.000000266),nrow = 5, dimnames = list(rownames, colnames))
as.table(tab)
r
sessionInfo()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/FUn")
GOseq_terms <- read.csv("list_GOterms.csv")
rm(list=ls())
GOseq_terms <- read.csv("list_GOterms.csv")
View(GOseq_terms)
GOseq_terms <- read.csv("list_GOterms.csv", sep="/t")
GOseq_terms <- read.csv("list_GOterms.csv", sep="\t")
GOseq_terms <- GOseq_terms[-(1:2),]
options(stringsAsFactors = FALSE) # this just always seems to help me.
library("goseq")
library("dplyr")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/FUn/GOseq/specifics")
GOseq_terms <- read.csv("DG_S_specs_GOseq.txt", sep="\t")
?read.csv
GOseq_terms <- read.csv("DG_S_specs_GOseq.txt", sep="\t",header=FALSE)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/FUn/GOseq/DE/DG_vs_S")
GOseq_terms <- read.csv("S_DG_specs_deGOseq.txt", sep="\t",header=FALSE)
resdata <- read.table("DE_fold_DG_S.txt")
resdata <- read.table("DE_fold_DG_S.txt", header=TRUE,sep"\t")
resdata <- read.table("DE_fold_DG_S.txt", header=TRUE,sep ="\t")
